# https://contest.yandex.ru/contest/24735/run-report/53783569/
def broken_search(nums, target) -> int:
    """Бинарный поиск в 'сломанном' списке.

    Args:
        nums (List): массив, бывший отсортированным в кольцевой структуре
        target ([type]): искомый эл-т
    Returns:
        int: индекс искомого эл-та, или -1 если не найден
    Алгоритм поиска:
    Массив делится на две части посередине.
    Одна точно должна быть упорядоченна.
    Если часть отсортирована, легко проверяется, входит ли в неё X.
    Итого:
    За left, right берутся индексы первого и последнего эл-тов.
    В цикле пока диапазон не схлопнется:
    Делим на части.
    Проверяем mid == X.
    Если левая сортирована:
        если X входит:
            индексы левой для след. итерации
        иначе:
            индексы правой для след. итерации
    иначе:
        если X входит:
            индексы правой для след. итерации
        иначе:
            индексы левой для след. итерации
    след. итерация
    При сужении диапазона до двух эл-тов, проверка на сортированность
    сравнивает один и тот же эл-т с собой. В условии необходимо '='.
    """
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid

        # левая часть
        if nums[left] <= nums[mid]:
            if nums[left] <= target < nums[mid]:
                right = mid - 1
            else:
                left = mid + 1
        else:  # правая часть
            if nums[mid] < target <= nums[right]:
                left = mid + 1
            else:
                right = mid - 1
    return -1
